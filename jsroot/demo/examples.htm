<!DOCTYPE html>
<html lang="en" prefix="og: https://ogp.me/ns#">
   <head>
      <!-- As template three.js web site was used -->
      <meta charset="UTF-8">
      <title>JavaScript ROOT examples</title>
      <!-- link rel="shortcut icon" href="img/RootIcon.ico" -->
      <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
      <meta property="og:title" content="JSROOT examples"/>
      <meta property="og:type" content="website"/>
      <meta property="og:description" content="Web page shows supported ROOT classes and correspondent draw options"/>
      <meta property="og:image" content="../files/img/th2.png"/>
      <meta property="og:image:type" content="image/png" />
      <meta property="og:image:width" content="200" />
      <meta property="og:image:height" content="150" />
      <style>
         * {
             box-sizing: border-box;
         }
         body {
            background-color: #ffffff;
            margin: 0px;
            font-family: 'Verdana, Geneva, sans-serif';
            font-size: 15px;
            line-height: 18px;
            color: #555;
            overflow: hidden;
         }
         h1 {
            margin-top: 20px;
            margin-bottom: 20px;
            margin-left: 20px;
            font-size: 25px;
            font-weight: normal;
         }
         h2 {
            color: #999;
            font-size: 18px;
            font-weight: normal;
            margin-top: 10px;
            margin-bottom: 5px;
         }
         hr {
            border: 0px;
            height: 1px;
            background-color: #ccc;
            margin: 30px 0px;
         }
         a {
            color: #2194CE;
            text-decoration: none;
         }
         a:hover {
            text-decoration: underline;
         }
         #panel {
            position: fixed;
            left: 0px;
            top: 0px;
            bottom: 0px;
            width: 240px;
            background: #ffffff;
            overflow: auto;
         }
            #panel #content {
               padding: 0px 10px;
            }
            #panel img {
               border: 1px solid #ccc;
            }
            #panel #book {
               text-align: center;
               margin-top: 15px;
            }
         #viewer {
            position: absolute;
            border: 0px;
            left: 240px;
            width: calc(100% - 240px);
            height: 100%;
            overflow: hidden;
         }

         #viewer_frame {
            border: 0px;
            width: 100%;
            height: 100%;
         }

         .link:hover {
            text-decoration: underline;
         }
      </style>
   </head>
   <body>

      <div id="panel">
         <h1 id="version"><a href=".." style="color:green">JSROOT</a></h1>
         <div id="content"></div>
         <br/>
      </div>

      <div id="viewer">
      </div>

      <!-- script type="text/javascript" src="demo/examples.js"> </script>
      <script type="text/javascript" src="../demo/examples.js"> </script-->

      <script type="text/javascript" >
         let scripts = "scripts/",
             jsroot_path = "./",
             demo_path = "demo/",
             filepath = "../files/",
             use_requirejs = false,
             use_openui5 = false,
             extra_opts = "", // extra options like webgl=no or interactive=0
             select_key = null, // select the only key like ?select=TH2
             no_interactive = false, // disable interactivity
             use_zstd = true;

         let icon = document.createElement("link");
         icon.setAttribute('src', "img/RootIcon.ico");
         icon.setAttribute('rel', "shortcut icon");

         if (window.location.search.indexOf("requirejs") > 0) {
            jsroot_path = "./indexr.htm";
            use_requirejs = true;
            document.title += ' (with require.js)';
         }

         if ((window.location.search.indexOf("sap") > 0) || (window.location.search.indexOf("openui") > 0)) {
            jsroot_path = "./indexsap.htm";
            use_openui5 = true;
            document.title += ' (with openui5)';
         }

         if (window.location.search.indexOf("nowebgl") > 0)
            extra_opts = "&webgl=0";

         if (window.location.search.indexOf("noint") > 0) {
            no_interactive = true;
            extra_opts += "&interactive=0";
         }

         if ((window.location.host.indexOf('jsroot.gsi.de') < 0) &&
             (window.location.host.indexOf('root.cern') < 0)) {
                filepath = "https://root.cern/js/files/";
                use_zstd = false;
         }

         if (window.location.protocol == "file:") {
            scripts = "../scripts/";
            jsroot_path = "../index.htm";
            demo_path = "../demo/",
            filepath = "https://jsroot.gsi.de/files/";
            use_requirejs = false;
            icon.setAttribute('src', "../img/RootIcon.ico");
         }

         document.getElementsByTagName("head")[0].appendChild(icon);

         function loadScript(name) {
            let element = document.createElement("script");
            element.setAttribute('type', "text/javascript");
            element.setAttribute('src', name);

            return new Promise(resolveFunc => {
               element.onload = function() {
                  element.onload = null;
                  resolveFunc(element);
               }
               document.getElementsByTagName("head")[0].appendChild(element);
            });
         }

         if (use_requirejs) {
            loadScript("//cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js").then(() => {
               require([scripts + 'JSRoot.core.js'], FillContent);
            });
         } else if (use_openui5) {
            loadScript("//openui5.hana.ondemand.com/1.72.0/resources/sap-ui-core.js")
              .then(() => loadScript(scripts + 'JSRoot.core.js')).then(FillContent);

         } else {
            loadScript(scripts + 'JSRoot.core.js').then(FillContent);
         }

         let keyid = null, optid, testfile, testobj, testinterval = 10, hpainter = null;

         function ProcessClick(durl, filename, itemname, opt, jsonname) {

            keyid = null; // stop execution of running test loop (if any)

          //  if (viewer && viewer.contentWindow) {
          //     let jsroot = viewer.contentWindow.JSROOT;
          //     if (jsroot && jsroot.hpainter) {
          //        console.log('CLEANUP PAINTER IN IFRAME');
          //        jsroot.hpainter.cleanup();
          //     }
          //  }

            if (JSROOT.hpainter)
               JSROOT.hpainter.cleanup();

            if (typeof JSROOT.cleanup === 'function')
               JSROOT.cleanup('viewer');

            if (no_interactive && JSROOT.settings) {
               JSROOT.settings.Tooltip = 0;
               JSROOT.settings.ContextMenu = false;
               JSROOT.settings.Zooming = false;
               JSROOT.settings.MoveResize = false;
               JSROOT.settings.DragAndDrop = false;
            }

            if (durl.length > 0) {
               let viewer = document.getElementById( 'viewer_frame' );
               if (!viewer) {
                  document.getElementById('viewer').innerHTML = "";
                  viewer = document.createElement('iframe');
                  viewer.id = "viewer_frame";
                  document.getElementById('viewer').appendChild(viewer);
               }
               viewer.src = jsroot_path + durl + (opt.length > 0 ? ("&opt=" + opt) : "") + extra_opts;
               viewer.focus();
             } else {

                document.getElementById('viewer').innerHTML = "";
                document.getElementById('viewer').style['background-color'] = "";

                if (jsonname) {
                   JSROOT.httpRequest(jsonname, 'object')
                         .then(obj => JSROOT.draw("viewer", obj, opt));
                } else {
                   JSROOT.openFile(filename)
                         .then(file => file.readObject(itemname))
                         .then(obj => JSROOT.draw("viewer", obj, opt));
                }
             }
         };

         function SetPageTitle(title) {
            let arr = document.getElementsByTagName("meta");
            for (let k=0;k<arr.length;++k) {
               let elem = arr[k];
               if (elem.getAttribute("property") == "og:title")
                 elem.setAttribute("content", title);
            }
         }

         function SetListener(elem, shortname, durl, filename, itemname, opt, jsonname) {
             elem.addEventListener( 'click', function (event) {
                event.preventDefault();
                window.location.hash = shortname;
                if (elem.title) SetPageTitle(elem.title);
                ProcessClick(durl, filename, itemname, opt, jsonname);
            });
         };

         function RunBigTest(interval, doinit) {
            if (doinit) {
               let running = (keyid != null); // indication that test running - no need to relaunch events
               keyid = select_key || 'TH1'; optid = -1;
               testfile = testobj = null;
               let ii = JSROOT.decodeUrl().get("interval");
               if (ii && Number.isInteger(parseInt(ii))) testinterval = parseInt(ii);
                                                    else testinterval = interval;
               if (running) return;
               return JSROOT.require("hierarchy").then(() => RunBigTest(0));
            }

            function TestContinue() { RunBigTest(); }
            function TestFailure(err) { throw err; }

            if (!keyid) return; // this is indication of test break

            if (!Number.isInteger(interval)) interval = testinterval;
            if (interval > 0)
               return setTimeout(() => RunBigTest(0), interval);

            if (++optid >= examples_main[keyid].length) {
               let found = false, next = null;
               if (!select_key)
                  for (let key in examples_main) {
                     if (found) { next = key; break; }
                     if (key == keyid) found = true;
                  }
               keyid = next;
               if (!next) return; // stop condition
               optid = -1; testfile = testobj = null;
               // console.log("Switch key ", keyid);
               return RunBigTest(0);
            }

            let entry = examples_main[keyid][optid];

            // exclude some entries from the test
            if (entry.notest) return RunBigTest(0);
            if (!use_zstd && entry.zstd) return RunBigTest(0);

            let filename = "", itemname = "", jsonname = "", url = "", opt = "";

            if (entry.file) {
                filename = entry.file;
                if ((filename.indexOf("http:")<0) && (filename.indexOf("https:")<0)) filename = filepath + filename;
            }
            if (entry.item) itemname = entry.item;
            if (entry.testopt !== undefined) opt = entry.testopt; else if (entry.opt) opt = entry.opt;
            if (entry.json) {
               jsonname = entry.json;
               if ((jsonname.indexOf("http:")<0) && (jsonname.indexOf("https:")<0)) jsonname = filepath + jsonname;
            }

            if (entry.url) {
               url = entry.url.replace(/\$\$\$/g, filepath);
            } else if (entry.items) {
               url = "?nobrowser&file=" + filename;
               if (entry.layout) url += "&layout=" + entry.layout;
               url += "&items=[" + entry.items.join(",") + "]";
               if (entry.opts) url += "&opts=[" + entry.opts.join(",") + "]";
               if (entry.mathjax) url += "&mathjax";
               if (entry.latex) url += "&latex=" + entry.latex;
               if (entry.style) url += "&style=" + entry.style;
            } else if (entry.asurl) {
               url = ((entry.asurl === "browser") ? "?" : "?nobrowser&");
               url += jsonname ? "json=" + jsonname : "file=" + filename + "&item=" + itemname;
               url += itemname + "&opt=" + opt;
               if (entry.mathjax) url += "&mathjax";
               if (entry.latex) url += "&latex=" + entry.latex;
               if (entry.style) url += "&style=" + entry.style;
            }

            // console.log('KEY ', keyid, 'opt', opt);
            // if ((url.length==0) || (keyid != 'Misc')) return RunBigTest(0);

            if (hpainter) { hpainter.cleanup(); hpainter = null; }
            JSROOT.cleanup("viewer");

            if (url.length > 0) {
               if (no_interactive) url += "&interactive=0";

               testfile = testobj = null;
               // if (keyid == 'TGeo') return RunBigTest(0);  // ignore TGeo URLs - too complex

               let d = JSROOT.decodeUrl(url),
                   layout = d.get("layout", "simple"),
                   nobrowser = d.has("nobrowser");

               if (nobrowser) {
                  document.getElementById('viewer').innerHTML = "";
                  hpainter = new JSROOT.HierarchyPainter('root', null);
                  hpainter.setDisplay(layout, "viewer");
               } else {
                  document.getElementById('viewer').innerHTML =
                      "<div id='left-div' style='float:left; width:25%; overflow:auto; height:100%;'>" +
                      '<div id="browser"></div></div>' +
                      '<div id="right-div" style="float:right; width:73%; height:100%;"></div>';

                  hpainter = new JSROOT.HierarchyPainter('root', 'browser');
                  hpainter.setDisplay(layout,"right-div");
               }

               hpainter.startGUI(null, url).then(TestContinue, TestFailure);
            } else if (jsonname.length > 0) {
               testfile = testobj = null;
               JSROOT.httpRequest(jsonname, 'object').then(obj => {
                  testobj = obj;
                  return JSROOT.draw("viewer", obj, opt).then(TestContinue, TestFailure);
               });
            } else if (filename.length > 0) {
                JSROOT.openFile(filename)
                      .then(file => { testfile = file; return testfile.readObject(itemname); })
                      .then(obj => { testobj = obj; return JSROOT.draw("viewer", obj, opt); })
                      .then(TestContinue, TestFailure);
            } else if (itemname.length > 0) {
                testfile.readObject(itemname)
                         .then(obj => { testobj = obj; return JSROOT.draw("viewer", obj, opt); })
                         .then(TestContinue, TestFailure);
            } else {
                JSROOT.draw("viewer", testobj, opt).then(TestContinue, TestFailure);
            }
         }

         function FillContent() {

            if (typeof examples_main == 'undefined')
               return loadScript(demo_path + 'examples.js').then(FillContent);

            if (window.location.search.indexOf("?more")==0) {
               if (typeof examples_more == 'undefined')
                  return loadScript(demo_path + 'examples_more.js').then(FillContent);

               for (let key in examples_more) {
                  if (key in examples_main) {
                     for (let n in examples_more[key])
                        examples_main[key].push(examples_more[key][n]);
                  } else {
                     examples_main[key] = examples_more[key];
                  }
               }
            }

            // all painter assigned to viewer element will be automatically informed about resize
            JSROOT.require(["painter"]).then(jsrp => jsrp.registerForResize('viewer'));

            let d = JSROOT.decodeUrl();

            select_key = d.get("select");
            if (!select_key && d.has("geom")) select_key = "TGeo";

            document.getElementById( 'version' ).title = JSROOT.version + ", " + JSROOT.source_dir;

            let content = document.getElementById( 'content' );

            for (let key in examples_main) {

               let opts = examples_main[key];

               if (select_key && (key != select_key)) continue;

               let header = document.createElement( 'h2' );
               header.textContent = key;
               content.appendChild( header );

               if (window.location.hash == "#" + key.toLowerCase())
                  header.scrollIntoView();

               let url = "", filename = "", itemname = "", jsonname = "", style = "";

               for (let n = 0; n<opts.length; ++n) {
                  let entry = opts[n];

                  let shortname = key.toLowerCase().replace(" ","_");

                  jsonname = ""; url = ""; style = "";

                  if ('url' in entry) {
                     url = entry.url.replace(/\$\$\$/g,filepath);
                  } else if ('json' in entry) {
                     jsonname = entry.json;
                     if ((jsonname.indexOf("http:")<0) && (jsonname.indexOf("https:")<0)) jsonname = filepath + jsonname;
                  } else {
                     if ('file' in entry) {
                        url = ""; filename = entry.file;
                        if ((filename.indexOf("http:")<0) && (filename.indexOf("https:")<0)) filename = filepath + filename;
                     }
                     if ('item' in entry) {
                        url = ""; itemname = entry.item; style = entry.style;
                     } else if ('items' in entry) {
                        url = "?nobrowser&file=" + filename;
                        if (entry.layout) url += "&layout=" + entry.layout;
                        url += "&items=[" + entry.items.join(",") + "]";
                        if (entry.opts) url += "&opts=[" + entry.opts.join(",") + "]";
                        if (entry.mathjax) url += "&mathjax";
                        if (entry.latex) url += "&latex=" + entry.latex;
                        if (entry.style) url += "&style=" + entry.style;
                     }
                  }

                  let opt = ('opt' in entry) ? entry.opt : "";
                  let aaa = document.createElement( 'a' );

                  if ('name' in entry)
                     aaa.textContent = entry.name;
                  else if (opt != "")
                     aaa.textContent = opt;
                  else
                     aaa.textContent = "<dflt>";

                  if (aaa.textContent != "<dflt>")
                     shortname += "_" + aaa.textContent.toLowerCase().replace(" ","_");

                  let prefix = (entry.asurl === "browser") ? "?" : "?nobrowser&";

                  if (entry.asurl) {
                     if (jsonname)
                        url = prefix + 'json=' + jsonname;
                     else
                        url = prefix + "file=" + filename + "&item=" + itemname;
                     if (entry.style) url += "&style=" + entry.style;
                     if (entry.mathjax) url += "&mathjax";
                     if (entry.latex) url += "&latex=" + entry.latex;
                  }

                  if (url)
                     aaa.href = jsroot_path + url;
                  else if (jsonname)
                     aaa.href = jsroot_path + prefix + "json=" + jsonname;
                  else
                     aaa.href = jsroot_path + prefix + "file=" + filename + "&item=" + itemname;

                  if (opt)
                     aaa.href += "&opt=" + opt;
                  if (style)
                     aaa.href += "&style=" + style;

                  if (extra_opts) aaa.href += extra_opts;

                  if ('title' in entry) {
                     aaa.title = entry.title;
                     // aaa.href += "&title='" + entry.title + "'";
                  }

                  content.appendChild( aaa );
                  SetListener(aaa, shortname, url, filename, itemname, opt, jsonname);

                  if (n < opts.length-1) {
                     content.appendChild(document.createTextNode(", "));
                  } else {
                     content.appendChild(document.createElement('br'));
                  }

                  if (window.location.hash == "#" + shortname) {
                     aaa.focus();
                     if (entry.title) SetPageTitle(entry.title);
                     ProcessClick(url, filename, itemname, opt, jsonname);
                  }
               }
            }

            if (window.location.search.indexOf("?more")==0) {
                let div = document.createElement( 'h2' );
                div.textContent = "Testing";
                content.appendChild( div );

                let aaa = document.createElement( 'a' );
                aaa.textContent = "run";
                aaa.title = "Run all examples after each other";
                content.appendChild( aaa );
                aaa.addEventListener( 'click', function (event) {
                    event.preventDefault();
                    window.location.hash = "run";
                    RunBigTest(10,true);
                });

                content.appendChild(document.createTextNode(", "));

                aaa = document.createElement( 'a' );
                aaa.textContent = "slow";
                aaa.title = "Run all examples slowly after each other";
                content.appendChild( aaa );
                aaa.addEventListener( 'click', function (event) {
                    event.preventDefault();
                    window.location.hash = "slow";
                    RunBigTest(5000,true);
                });

                content.appendChild(document.createTextNode(", "));

                aaa = document.createElement( 'a' );
                aaa.textContent = "fast";
                aaa.title = "Run all examples very fast";
                content.appendChild( aaa );
                aaa.addEventListener( 'click', function (event) {
                    event.preventDefault();
                    window.location.hash = "fast";
                    RunBigTest(1,true);
                });

                content.appendChild(document.createTextNode(", "));
                aaa = document.createElement( 'a' );
                aaa.textContent = "stop";
                aaa.title = "Stop running example";
                content.appendChild( aaa );
                aaa.addEventListener( 'click', function (event) {
                    event.preventDefault();
                    keyid = null;
                });
            }
            if (window.location.hash == "#run") RunBigTest(100,true);
            if (window.location.hash == "#fast") RunBigTest(1,true);
            if (window.location.hash == "#slow") RunBigTest(5000,true);

         }; // FillContent

      </script>
   </body>
</html>
