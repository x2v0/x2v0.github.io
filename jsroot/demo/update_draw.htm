<!DOCTYPE html>
<html lang="en">
<head>

   <meta charset="UTF-8">

   <title>Demonstrator of online usage of JSROOT</title>

   <!--  load JSROOT with 2D graphic -->
   <script src="../scripts/JSRoot.core.js" type="text/javascript"></script>

   <style>
      html {
         height: 100%;
      }
      body {
         min-height: 100%;
         margin: 0px;
         overflow : hidden;
      }
  </style>


</head>

<body>
   <div id="drawing" style="position:absolute; left:1px; top:1px; bottom:1px; right:1px"></div>

   <script type='text/javascript'>

      let mdi = null, cnt = 0, drawopt = null, addr = null;

      function updateGUI() {

         // here set of generated json files are used
         // One could specify addres of running THttpServer like http://localhost:8080/Canvases/c1/root.json.gz?compact=23
         // Or one can create root.json file in the application and place it on the webserver
         // To run demo, one should generate rootXX.json files using demo.C macro

         let request_addr = addr || ("root" + (cnt % 20) + ".json"),
             request_count = cnt++;

         JSROOT.httpRequest(request_addr, 'object').then(histo => {
            if (!histo) {
               d3.select('#drawing').html("<h3>Can not get " + request_addr + " from the server</h3>");
               return;
            }

            // when use grid layout, use counter value stored in request itself
            let frame = mdi ? mdi.findFrame("item" + (request_count % mdi.numGridFrames()), true) : 'drawing';

            // redraw histogram at specified frame
            JSROOT.redraw(frame, histo, drawopt).then(() => {
               // let adjust drawing when browser will be resized
               if (!request_count) JSROOT.Painter.registerForResize('drawing');
            });
         });
      }

      let d = JSROOT.decodeUrl();

      let monitor = parseInt(d.get("monitoring") || "1000");

      drawopt = d.get("opt");
      addr = d.get("addr");

      let layout = d.get("layout"), promise = Promise.resolve(this);

      if (layout)
          promise = JSROOT.require('hierarchy').then(() => { mdi = new JSROOT.GridDisplay('drawing', layout); });

      promise.then(() => {
         setInterval(updateGUI, monitor);
     });

   </script>


</body>

</html>

